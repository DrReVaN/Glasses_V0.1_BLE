<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [WB35Test\WB35Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image WB35Test\WB35Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Jan 17 21:45:28 2022
<BR><P>
<H3>Maximum Stack Usage =        640 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
APPE_SysUserEvtRx &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[43]">AES1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[44]">AES2_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[58]">APPE_SysStatusNot</a> from app_entry.o(i.APPE_SysStatusNot) referenced from app_entry.o(i.MX_APPE_Init)
 <LI><a href="#[59]">APPE_SysUserEvtRx</a> from app_entry.o(i.APPE_SysUserEvtRx) referenced from app_entry.o(i.MX_APPE_Init)
 <LI><a href="#[54]">Adv_Cancel</a> from app_ble.o(i.Adv_Cancel) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[51]">BLE_StatusNot</a> from app_ble.o(i.BLE_StatusNot) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[52]">BLE_UserEvtRx</a> from app_ble.o(i.BLE_UserEvtRx) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[e]">BusFault_Handler</a> from stm32wbxx_it.o(i.BusFault_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[29]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[2a]">COMP_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[3b]">CRS_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[5a]">Custom_STM_Event_Handler</a> from custom_stm.o(i.Custom_STM_Event_Handler) referenced from custom_stm.o(i.SVCCTL_InitCustomSvc)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[21]">DMA1_Channel3_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[23]">DMA1_Channel5_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[24]">DMA1_Channel6_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[25]">DMA1_Channel7_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[47]">DMA2_Channel1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[48]">DMA2_Channel2_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[49]">DMA2_Channel3_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel4_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel5_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel6_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel7_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[4e]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from stm32wbxx_it.o(i.DebugMon_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[39]">EXTI15_10_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from stm32wbxx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[46]">FPU_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[55]">HAL_IPCC_RxCallback</a> from stm32wbxx_hal_ipcc.o(i.HAL_IPCC_RxCallback) referenced from stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
 <LI><a href="#[56]">HAL_IPCC_TxCallback</a> from stm32wbxx_hal_ipcc.o(i.HAL_IPCC_TxCallback) referenced from stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
 <LI><a href="#[3f]">HSEM_IRQHandler</a> from stm32wbxx_it.o(i.HSEM_IRQHandler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from stm32wbxx_it.o(i.HardFault_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[35]">I2C3_ER_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[34]">I2C3_EV_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[3d]">IPCC_C1_RX_IRQHandler</a> from stm32wbxx_it.o(i.IPCC_C1_RX_IRQHandler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[3e]">IPCC_C1_TX_IRQHandler</a> from stm32wbxx_it.o(i.IPCC_C1_TX_IRQHandler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[40]">LPTIM1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[41]">LPTIM2_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[38]">LPUART1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from stm32wbxx_it.o(i.MemManage_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from stm32wbxx_it.o(i.NMI_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[31]">PKA_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[15]">PVD_PVM_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[3c]">PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from stm32wbxx_it.o(i.PendSV_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[42]">QUADSPI_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[45]">RNG_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[3a]">RTC_Alarm_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[17]">RTC_WKUP_IRQHandler</a> from stm32wbxx_it.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from stm32wbxx_it.o(i.SVC_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[5b]">SendFreeBuf</a> from tl_mbox.o(i.SendFreeBuf) referenced from tl_mbox.o(i.TL_MM_EvtDone)
 <LI><a href="#[13]">SysTick_Handler</a> from stm32wbxx_it.o(i.SysTick_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_stm32wbxx.o(i.SystemInit) referenced from startup_stm32wb35xx_cm4.o(.text)
 <LI><a href="#[16]">TAMP_STAMP_LSECSS_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_TIM16_IRQHandler</a> from stm32wbxx_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[5d]">TL_BLE_Init</a> from tl_mbox.o(i.TL_BLE_Init) referenced from hci_tl_if.o(i.hci_register_io_bus)
 <LI><a href="#[5e]">TL_BLE_SendCmd</a> from tl_mbox.o(i.TL_BLE_SendCmd) referenced from hci_tl_if.o(i.hci_register_io_bus)
 <LI><a href="#[61]">TL_SYS_Init</a> from tl_mbox.o(i.TL_SYS_Init) referenced from shci_tl_if.o(i.shci_register_io_bus)
 <LI><a href="#[62]">TL_SYS_SendCmd</a> from tl_mbox.o(i.TL_SYS_SendCmd) referenced from shci_tl_if.o(i.shci_register_io_bus)
 <LI><a href="#[5f]">TlCmdEvtReceived</a> from shci_tl.o(i.TlCmdEvtReceived) referenced from shci_tl.o(i.shci_init)
 <LI><a href="#[5c]">TlEvtReceived</a> from hci_tl.o(i.TlEvtReceived) referenced from hci_tl.o(i.hci_init)
 <LI><a href="#[60]">TlUserEvtReceived</a> from shci_tl.o(i.TlUserEvtReceived) referenced from shci_tl.o(i.shci_init)
 <LI><a href="#[37]">USART1_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[27]">USB_HP_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[28]">USB_LP_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from stm32wbxx_it.o(i.UsageFault_Handler) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32wb35xx_cm4.o(.text) referenced from startup_stm32wb35xx_cm4.o(RESET)
 <LI><a href="#[63]">__main</a> from __main.o(!!!main) referenced from startup_stm32wb35xx_cm4.o(.text)
 <LI><a href="#[53]">hci_user_evt_proc</a> from hci_tl.o(i.hci_user_evt_proc) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[57]">shci_user_evt_proc</a> from shci_tl.o(i.shci_user_evt_proc) referenced from app_entry.o(i.MX_APPE_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[66]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1aa]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ab]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ac]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1ad]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1ae]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[67]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1af]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c4]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1c5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1c6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1c7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1ca]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[65]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[69]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1cd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[70]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[72]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>AES1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>AES2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_STAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb35xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32wb35xx_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a5]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[74]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1cf]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_STM_App_Notification
</UL>

<P><STRONG><a name="[7a]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[79]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1d5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1d8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[7f]"></a>APPD_EnableCPU2</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, app_debug.o(i.APPD_EnableCPU2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = APPD_EnableCPU2 &rArr; SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[82]"></a>APPD_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_debug.o(i.APPD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = APPD_Init &rArr; APPD_SetCPU2GpioConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[8d]"></a>APP_BLE_Init</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, app_ble.o(i.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_APP_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[168]"></a>BAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.BAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[169]"></a>BLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.BLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[177]"></a>BVOPUS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.BVOPUS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>CAP1203_Exit_PWR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32_cap1203.o(i.CAP1203_Exit_PWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAP1203_Exit_PWR &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>CAP1203_Get_CS1_State</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_cap1203.o(i.CAP1203_Get_CS1_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAP1203_Get_CS1_State &rArr; CAP1203_Get_CS_State &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS_State
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
</UL>

<P><STRONG><a name="[b0]"></a>CAP1203_Get_CS2_State</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_cap1203.o(i.CAP1203_Get_CS2_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAP1203_Get_CS2_State &rArr; CAP1203_Get_CS_State &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS_State
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
</UL>

<P><STRONG><a name="[b1]"></a>CAP1203_Get_CS3_State</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_cap1203.o(i.CAP1203_Get_CS3_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAP1203_Get_CS3_State &rArr; CAP1203_Get_CS_State &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS_State
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
</UL>

<P><STRONG><a name="[af]"></a>CAP1203_Get_CS_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_cap1203.o(i.CAP1203_Get_CS_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CAP1203_Get_CS_State &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS3_State
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS2_State
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS1_State
</UL>

<P><STRONG><a name="[b2]"></a>CAP1203_Go_PWR</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_cap1203.o(i.CAP1203_Go_PWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAP1203_Go_PWR &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
</UL>

<P><STRONG><a name="[b3]"></a>CAP1203_Go_Standby</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32_cap1203.o(i.CAP1203_Go_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAP1203_Go_Standby &rArr; write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>CAP1203_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32_cap1203.o(i.CAP1203_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAP1203_Init &rArr; CAP1203_Int_Clr &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Int_Clr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Sensitivity
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Int_Enb
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>CAP1203_Int_Clr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32_cap1203.o(i.CAP1203_Int_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAP1203_Int_Clr &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
</UL>

<P><STRONG><a name="[b6]"></a>CAP1203_Int_Enb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_cap1203.o(i.CAP1203_Int_Enb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAP1203_Int_Enb &rArr; write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Init
</UL>

<P><STRONG><a name="[b8]"></a>CAP1203_Set_PWR_CS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_cap1203.o(i.CAP1203_Set_PWR_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAP1203_Set_PWR_CS &rArr; write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
</UL>

<P><STRONG><a name="[b9]"></a>CAP1203_Set_PWR_Time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_cap1203.o(i.CAP1203_Set_PWR_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAP1203_Set_PWR_Time &rArr; write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
</UL>

<P><STRONG><a name="[b5]"></a>CAP1203_Set_Sensitivity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_cap1203.o(i.CAP1203_Set_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAP1203_Set_Sensitivity &rArr; write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Init
</UL>

<P><STRONG><a name="[ba]"></a>CAP1203_Set_Standby_CS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_cap1203.o(i.CAP1203_Set_Standby_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAP1203_Set_Standby_CS &rArr; write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>CAP1203_Set_Standby_Sensitivity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_cap1203.o(i.CAP1203_Set_Standby_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAP1203_Set_Standby_Sensitivity &rArr; write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>CRS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.CRS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[96]"></a>Custom_APP_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom_app.o(i.Custom_APP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[160]"></a>Custom_APP_Notification</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, custom_app.o(i.Custom_APP_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Custom_APP_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[bc]"></a>Custom_STM_App_Notification</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, custom_app.o(i.Custom_STM_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Custom_STM_App_Notification
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_STM_Event_Handler
</UL>

<P><STRONG><a name="[16b]"></a>DIS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.DIS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>EDS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.EDS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32wbxx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[83]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[84]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_Delay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_entry.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_auto_off
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_auto_off
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Reset
</UL>

<P><STRONG><a name="[c1]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[ee]"></a>HAL_GetTickPrio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTickPrio))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c5]"></a>HAL_HSEM_FreeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_hsem.o(i.HAL_HSEM_FreeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_HSEM_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32wbxx_hal_hsem.o(i.HAL_HSEM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HSEM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_FreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSEM_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[14b]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32wbxx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, stm32wbxx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>

<P><STRONG><a name="[cd]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, stm32wbxx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>

<P><STRONG><a name="[c7]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 96 bytes, Stack size 112 bytes, stm32wbxx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_IPCC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32wbxx_hal_ipcc.o(i.HAL_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_IPCC_Init &rArr; HAL_IPCC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_SetDefaultCallbacks
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_Reset_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>HAL_IPCC_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_IPCC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IPCC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[55]"></a>HAL_IPCC_RxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(i.HAL_IPCC_RxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
</UL>
<P><STRONG><a name="[56]"></a>HAL_IPCC_TxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(i.HAL_IPCC_TxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
</UL>
<P><STRONG><a name="[17a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>HAL_InitTick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[da]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[158]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[196]"></a>HAL_PWR_DisableWakeUpPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr.o(i.HAL_PWR_DisableWakeUpPin))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRNGClockSource
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetCLK48ClockSource
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickPrio
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[f2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1406 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetRange
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetCalibTrimming
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI1_IsReady
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f8]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, stm32wbxx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_RTC_Init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32wbxx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, stm32wbxx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_SPI_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, stm32wbxx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, stm32wbxx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32wbxx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>

<P><STRONG><a name="[de]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, stm32wbxx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HIDS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HIDS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[16e]"></a>HRS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HRS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[3f]"></a>HSEM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.HSEM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSEM_IRQHandler &rArr; HAL_HSEM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>HTS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HTS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[12d]"></a>HW_IPCC_BLE_AclDataAckNot</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tl_mbox.o(i.HW_IPCC_BLE_AclDataAckNot))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[17d]"></a>HW_IPCC_BLE_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_BLE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[11f]"></a>HW_IPCC_BLE_RxEvtNot</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tl_mbox.o(i.HW_IPCC_BLE_RxEvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_BLE_RxEvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[17e]"></a>HW_IPCC_BLE_SendCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_BLE_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_SendCmd
</UL>

<P><STRONG><a name="[17f]"></a>HW_IPCC_Enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hw_ipcc.o(i.HW_IPCC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
</UL>

<P><STRONG><a name="[123]"></a>HW_IPCC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_ipcc.o(i.HW_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
</UL>

<P><STRONG><a name="[124]"></a>HW_IPCC_MM_SendFreeBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hw_ipcc.o(i.HW_IPCC_MM_SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_IsActiveFlag_CHx
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>

<P><STRONG><a name="[126]"></a>HW_IPCC_Rx_Handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hw_ipcc.o(i.HW_IPCC_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_IPCC_Rx_Handler &rArr; HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_IPCC_IsActiveFlag_CHx
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_RX_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HW_IPCC_SYS_CmdEvtNot</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tl_mbox.o(i.HW_IPCC_SYS_CmdEvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[128]"></a>HW_IPCC_SYS_EvtNot</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tl_mbox.o(i.HW_IPCC_SYS_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[181]"></a>HW_IPCC_SYS_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_SYS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
</UL>

<P><STRONG><a name="[182]"></a>HW_IPCC_SYS_SendCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_SYS_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_SendCmd
</UL>

<P><STRONG><a name="[129]"></a>HW_IPCC_TRACES_EvtNot</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.HW_IPCC_TRACES_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_TRACES_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_EvtReceived
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[183]"></a>HW_IPCC_TRACES_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_TRACES_Init))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
</UL>

<P><STRONG><a name="[12c]"></a>HW_IPCC_Tx_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hw_ipcc.o(i.HW_IPCC_Tx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_Tx_Handler &rArr; HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtNot
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_AclDataAckNot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_IsActiveFlag_CHx
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_TX_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HW_TS_Init</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, hw_timerserver.o(i.HW_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_TS_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[133]"></a>HW_TS_RTC_Int_AppNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_timerserver.o(i.HW_TS_RTC_Int_AppNot))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[131]"></a>HW_TS_RTC_Wakeup_Handler</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, hw_timerserver.o(i.HW_TS_RTC_Wakeup_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Int_AppNot
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkTimer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HW_TS_Start</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hw_timerserver.o(i.HW_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[132]"></a>HW_TS_Stop</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, hw_timerserver.o(i.HW_TS_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkTimer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>IAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.IAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[3d]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.IPCC_C1_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IPCC_C1_RX_IRQHandler &rArr; HW_IPCC_Rx_Handler &rArr; HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.IPCC_C1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IPCC_C1_TX_IRQHandler &rArr; HW_IPCC_Tx_Handler &rArr; HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>IPCC_Reset_Register</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(i.IPCC_Reset_Register))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[d5]"></a>IPCC_SetDefaultCallbacks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPCC_SetDefaultCallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[13f]"></a>Init_Exti</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.Init_Exti))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[171]"></a>LLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.LLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[17c]"></a>LST_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm_list.o(i.LST_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[194]"></a>LST_insert_head</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[179]"></a>LST_insert_tail</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
</UL>

<P><STRONG><a name="[122]"></a>LST_is_empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[120]"></a>LST_remove_head</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm_list.o(i.LST_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[13b]"></a>LST_remove_node</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_remove_node))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
</UL>

<P><STRONG><a name="[178]"></a>MESH_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.MESH_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[173]"></a>MOTENV_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.MOTENV_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[13c]"></a>MX_APPE_Config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_entry.o(i.MX_APPE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_APPE_Config &rArr; Reset_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_APPE_Init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, app_entry.o(i.MX_APPE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_APPE_Init &rArr; APPD_Init &rArr; APPD_SetCPU2GpioConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Exti
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>MX_APPE_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.MX_APPE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_APPE_Process &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>OTAS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.OTAS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[9f]"></a>OTP_Read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, otp.o(i.OTP_Read))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
</UL>

<P><STRONG><a name="[151]"></a>Osal_MemCpy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_resp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[152]"></a>Osal_MemSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_resp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
</UL>

<P><STRONG><a name="[174]"></a>P2PS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.P2PS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>PeriphCommonClock_Config</STRONG> (Thumb, 50 bytes, Stack size 88 bytes, main.o(i.PeriphCommonClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PeriphCommonClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[17]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>SEQ_BitPosition</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32_seq.o(i.SEQ_BitPosition))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>

<P><STRONG><a name="[91]"></a>SHCI_C2_BLE_Init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, shci.o(i.SHCI_C2_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SHCI_C2_BLE_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[8c]"></a>SHCI_C2_Config</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, shci.o(i.SHCI_C2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SHCI_C2_Config &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[81]"></a>SHCI_C2_DEBUG_Init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, shci.o(i.SHCI_C2_DEBUG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[8b]"></a>SHCI_GetWirelessFwInfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, shci.o(i.SHCI_GetWirelessFwInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHCI_GetWirelessFwInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[15f]"></a>SVCCTL_App_Notification</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, app_ble.o(i.SVCCTL_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_APP_Notification
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>

<P><STRONG><a name="[94]"></a>SVCCTL_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, svc_ctl.o(i.SVCCTL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[164]"></a>SVCCTL_InitCustomSvc</STRONG> (Thumb, 684 bytes, Stack size 80 bytes, custom_stm.o(i.SVCCTL_InitCustomSvc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[165]"></a>SVCCTL_RegisterSvcHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_ctl.o(i.SVCCTL_RegisterSvcHandler))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
</UL>

<P><STRONG><a name="[163]"></a>SVCCTL_SvcInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, svc_ctl.o(i.SVCCTL_SvcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDD_STM_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTAS_STM_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTENV_STM_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESH_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLS_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAS_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDS_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDS_STM_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIS_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_STM_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BVOPUS_STM_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLS_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[9d]"></a>SVCCTL_UserEvtRx</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, svc_ctl.o(i.SVCCTL_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UserEvtRx
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>SystemClock_Config</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32wbxx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11e]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[106]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[116]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[5d]"></a>TL_BLE_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_BLE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(i.hci_register_io_bus)
</UL>
<P><STRONG><a name="[5e]"></a>TL_BLE_SendCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_BLE_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_BLE_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(i.hci_register_io_bus)
</UL>
<P><STRONG><a name="[144]"></a>TL_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_Enable &rArr; HW_IPCC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[141]"></a>TL_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_Init &rArr; HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[180]"></a>TL_MM_EvtDone</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_MM_EvtDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[143]"></a>TL_MM_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_MM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_MM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[61]"></a>TL_SYS_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_SYS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(i.shci_register_io_bus)
</UL>
<P><STRONG><a name="[62]"></a>TL_SYS_SendCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_SYS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_SYS_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(i.shci_register_io_bus)
</UL>
<P><STRONG><a name="[12b]"></a>TL_TRACES_EvtReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_TRACES_EvtReceived))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
</UL>

<P><STRONG><a name="[80]"></a>TL_TRACES_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_TRACES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_TRACES_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[172]"></a>TPS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.TPS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[140]"></a>UTIL_LPM_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_lpm.o(i.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[8e]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_lpm.o(i.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[188]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[18b]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(i.UTIL_SEQ_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[9c]"></a>UTIL_SEQ_PauseTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PauseTask))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[18c]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[18a]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[90]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_seq.o(i.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_RegTask
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[9b]"></a>UTIL_SEQ_ResumeTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_ResumeTask))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[146]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32_seq.o(i.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>

<P><STRONG><a name="[18f]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
</UL>

<P><STRONG><a name="[192]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_seq.o(i.UTIL_SEQ_SetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
</UL>

<P><STRONG><a name="[18d]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32_seq.o(i.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
</UL>

<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb35xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>ZDD_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.ZDD_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[aa]"></a>aci_gap_configure_whitelist</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gap_aci.o(i.aci_gap_configure_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aci_gap_configure_whitelist &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a4]"></a>aci_gap_init</STRONG> (Thumb, 132 bytes, Stack size 320 bytes, ble_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[162]"></a>aci_gap_numeric_comparison_value_confirm_yesno</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_numeric_comparison_value_confirm_yesno))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aci_gap_numeric_comparison_value_confirm_yesno &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[161]"></a>aci_gap_pass_key_resp</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_pass_key_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aci_gap_pass_key_resp &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[a9]"></a>aci_gap_set_authentication_requirement</STRONG> (Thumb, 114 bytes, Stack size 304 bytes, ble_gap_aci.o(i.aci_gap_set_authentication_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_authentication_requirement &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[99]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 162 bytes, Stack size 336 bytes, ble_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[a8]"></a>aci_gap_set_io_capability</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_set_io_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_io_capability &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[98]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gap_aci.o(i.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
</UL>

<P><STRONG><a name="[9a]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 88 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_update_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aci_gap_update_adv_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[167]"></a>aci_gatt_add_char</STRONG> (Thumb, 190 bytes, Stack size 336 bytes, ble_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
</UL>

<P><STRONG><a name="[166]"></a>aci_gatt_add_service</STRONG> (Thumb, 170 bytes, Stack size 320 bytes, ble_gatt_aci.o(i.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
</UL>

<P><STRONG><a name="[a3]"></a>aci_gatt_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a6]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 108 bytes, Stack size 304 bytes, ble_gatt_aci.o(i.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[be]"></a>aci_gatt_write_resp</STRONG> (Thumb, 112 bytes, Stack size 312 bytes, ble_gatt_aci.o(i.aci_gatt_write_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = aci_gatt_write_resp &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_STM_Event_Handler
</UL>

<P><STRONG><a name="[95]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_set_radio_activity_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aci_hal_set_radio_activity_mask &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[a2]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a1]"></a>aci_hal_write_config_data</STRONG> (Thumb, 98 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[186]"></a>hci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.hci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[190]"></a>hci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.hci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[8f]"></a>hci_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hci_tl.o(i.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_io_bus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[a7]"></a>hci_le_set_default_phy</STRONG> (Thumb, 84 bytes, Stack size 296 bytes, ble_hci_le.o(i.hci_le_set_default_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = hci_le_set_default_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[185]"></a>hci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.hci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[191]"></a>hci_register_io_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci_tl_if.o(i.hci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[a0]"></a>hci_reset</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ble_hci_le.o(i.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = hci_reset &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[18e]"></a>hci_send_req</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, hci_tl.o(i.hci_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyCmdStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_resp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
</UL>

<P><STRONG><a name="[53]"></a>hci_user_evt_proc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hci_tl.o(i.hci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[6e]"></a>main</STRONG> (Thumb, 274 bytes, Stack size 136 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisableWakeUpPin
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Standby_Sensitivity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Standby_CS
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Go_Standby
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Exit_PWR
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_touchdetection
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_auto_off
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[184]"></a>shci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(i.shci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlCmdEvtReceived
</UL>

<P><STRONG><a name="[19b]"></a>shci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(i.shci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[142]"></a>shci_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, shci_tl.o(i.shci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shci_init &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_register_io_bus
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[187]"></a>shci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.shci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
</UL>

<P><STRONG><a name="[19c]"></a>shci_register_io_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shci_tl_if.o(i.shci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
</UL>

<P><STRONG><a name="[15c]"></a>shci_send</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, shci_tl.o(i.shci_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
</UL>

<P><STRONG><a name="[57]"></a>shci_user_evt_proc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, shci_tl.o(i.shci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.MX_APPE_Init)
</UL>
<P><STRONG><a name="[1a7]"></a>ssd1306_DrawPixel</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssd1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteChar
</UL>

<P><STRONG><a name="[1a3]"></a>ssd1306_Fill</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd1306_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
</UL>

<P><STRONG><a name="[19e]"></a>ssd1306_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ssd1306_Init &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetContrast
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Fill
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
</UL>

<P><STRONG><a name="[19f]"></a>ssd1306_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd1306_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[1a2]"></a>ssd1306_SetContrast</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_SetContrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ssd1306_SetContrast &rArr; ssd1306_WriteCommand &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
</UL>

<P><STRONG><a name="[1a9]"></a>ssd1306_SetCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
</UL>

<P><STRONG><a name="[1a0]"></a>ssd1306_SetDisplayOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_SetDisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssd1306_SetDisplayOn &rArr; ssd1306_WriteCommand &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_auto_off
</UL>

<P><STRONG><a name="[1a4]"></a>ssd1306_UpdateScreen</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
</UL>

<P><STRONG><a name="[1a6]"></a>ssd1306_WriteChar</STRONG> (Thumb, 138 bytes, Stack size 52 bytes, ssd1306.o(i.ssd1306_WriteChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
</UL>

<P><STRONG><a name="[1a1]"></a>ssd1306_WriteCommand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssd1306_WriteCommand &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetContrast
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[1a5]"></a>ssd1306_WriteData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssd1306_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
</UL>

<P><STRONG><a name="[1a8]"></a>ssd1306_WriteString</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, ssd1306.o(i.ssd1306_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteChar
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pageclick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_oled_data
</UL>

<P><STRONG><a name="[19a]"></a>thread_oled_auto_off</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.thread_oled_auto_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = thread_oled_auto_off &rArr; ssd1306_SetDisplayOn &rArr; ssd1306_WriteCommand &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>thread_oled_data</STRONG> (Thumb, 738 bytes, Stack size 40 bytes, main.o(i.thread_oled_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = thread_oled_data &rArr; ssd1306_Init &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteChar
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetCursor
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetContrast
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Fill
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>thread_pageclick</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(i.thread_pageclick))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = thread_pageclick &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetCursor
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Fill
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Standby_CS
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_PWR_Time
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_PWR_CS
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Int_Clr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Go_PWR
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>thread_touchdetection</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, main.o(i.thread_touchdetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = thread_touchdetection &rArr; CAP1203_Int_Clr &rArr; read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Standby_Sensitivity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Standby_CS
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Int_Clr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Go_Standby
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS3_State
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS2_State
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS1_State
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Exit_PWR
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1db]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1dc]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[148]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[147]"></a>MX_GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>MX_I2C1_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>MX_RTC_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>MX_TIM1_Init</STRONG> (Thumb, 212 bytes, Stack size 120 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>APPE_SysStatusNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(i.APPE_SysStatusNot))
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.MX_APPE_Init)
</UL>
<P><STRONG><a name="[59]"></a>APPE_SysUserEvtRx</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, app_entry.o(i.APPE_SysUserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = APPE_SysUserEvtRx &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_GetWirelessFwInfo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.MX_APPE_Init)
</UL>
<P><STRONG><a name="[13d]"></a>Reset_Device</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_entry.o(i.Reset_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reset_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[85]"></a>APPD_SetCPU2GpioConfig</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, app_debug.o(i.APPD_SetCPU2GpioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APPD_SetCPU2GpioConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_AHB2_GRP1_EnableClock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[87]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_debug.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>

<P><STRONG><a name="[88]"></a>LL_C2_AHB2_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_debug.o(i.LL_C2_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_C2_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>

<P><STRONG><a name="[195]"></a>LinkTimerBefore</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hw_timerserver.o(i.LinkTimerBefore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkTimerBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
</UL>

<P><STRONG><a name="[15b]"></a>ReadRtcSsrValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_timerserver.o(i.ReadRtcSsrValue))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>

<P><STRONG><a name="[136]"></a>RescheduleTimerList</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, hw_timerserver.o(i.RescheduleTimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[15a]"></a>RestartWakeupCounter</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hw_timerserver.o(i.RestartWakeupCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[159]"></a>ReturnTimeElapsed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hw_timerserver.o(i.ReturnTimeElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReturnTimeElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[134]"></a>UnlinkTimer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hw_timerserver.o(i.UnlinkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnlinkTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[138]"></a>linkTimer</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, hw_timerserver.o(i.linkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linkTimer &rArr; LinkTimerBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkTimerBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[d0]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[d6]"></a>LL_AHB3_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_AHB3_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
</UL>

<P><STRONG><a name="[d1]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[ff]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[ed]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[eb]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ea]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f6]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f7]"></a>LL_RCC_LSI1_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_LSI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f1]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[ec]"></a>LL_RCC_MSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f5]"></a>LL_RCC_MSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f4]"></a>LL_RCC_MSI_SetRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetRange))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f0]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[157]"></a>RCC_SetFlashLatency</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[f3]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[e2]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[154]"></a>LL_RCC_PLLSAI1_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[156]"></a>LL_RCC_PLLSAI1_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[155]"></a>LL_RCC_PLLSAI1_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[e5]"></a>LL_RCC_SetCLK48ClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetCLK48ClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e4]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetI2CClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetI2CClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e3]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e7]"></a>LL_RCC_SetRNGClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetRNGClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e0]"></a>RCCEx_PLLSAI1_ConfigNP</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNP
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e6]"></a>RCCEx_PLLSAI1_ConfigNQ</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e8]"></a>RCCEx_PLLSAI1_ConfigNR</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[df]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[13a]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[139]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32wbxx_hal_i2c.o(i.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[ca]"></a>I2C_TransferConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32wbxx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[c9]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32wbxx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[cb]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32wbxx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[cc]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32wbxx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[ce]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32wbxx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[101]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32wbxx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[15d]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32wbxx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[15e]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32wbxx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[109]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[115]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32wbxx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[117]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[118]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[119]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[11a]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[107]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[108]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[54]"></a>Adv_Cancel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_ble.o(i.Adv_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Adv_Cancel &rArr; aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[97]"></a>Adv_Request</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, app_ble.o(i.Adv_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[51]"></a>BLE_StatusNot</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_ble.o(i.BLE_StatusNot))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_ResumeTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PauseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[52]"></a>BLE_UserEvtRx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ble.o(i.BLE_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = BLE_UserEvtRx &rArr; SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[9e]"></a>BleGetBdAddress</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_ble.o(i.BleGetBdAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BleGetBdAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[93]"></a>Ble_Hci_Gap_Gatt_Init</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, app_ble.o(i.Ble_Hci_Gap_Gatt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Ble_Hci_Gap_Gatt_Init &rArr; aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[5a]"></a>Custom_STM_Event_Handler</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, custom_stm.o(i.Custom_STM_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Custom_STM_Event_Handler &rArr; aci_gatt_write_resp &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_resp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_STM_App_Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_stm.o(i.SVCCTL_InitCustomSvc)
</UL>
<P><STRONG><a name="[125]"></a>LL_C1_IPCC_IsActiveFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_ipcc.o(i.LL_C1_IPCC_IsActiveFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
</UL>

<P><STRONG><a name="[127]"></a>LL_C2_IPCC_IsActiveFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_ipcc.o(i.LL_C2_IPCC_IsActiveFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[121]"></a>OutputDbgTrace</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tl_mbox.o(i.OutputDbgTrace))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_SendCmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_SendCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtNot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
</UL>

<P><STRONG><a name="[5b]"></a>SendFreeBuf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tl_mbox.o(i.SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendFreeBuf &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tl_mbox.o(i.TL_MM_EvtDone)
</UL>
<P><STRONG><a name="[193]"></a>NotifyCmdStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hci_tl.o(i.NotifyCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[5c]"></a>TlEvtReceived</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hci_tl.o(i.TlEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlEvtReceived &rArr; hci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl.o(i.hci_init)
</UL>
<P><STRONG><a name="[19d]"></a>Cmd_SetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, shci_tl.o(i.Cmd_SetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cmd_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[5f]"></a>TlCmdEvtReceived</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, shci_tl.o(i.TlCmdEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TlCmdEvtReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(i.shci_init)
</UL>
<P><STRONG><a name="[60]"></a>TlUserEvtReceived</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shci_tl.o(i.TlUserEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlUserEvtReceived &rArr; shci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(i.shci_init)
</UL>
<P><STRONG><a name="[ac]"></a>read_register</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32_cap1203.o(i.read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_register &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Int_Clr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Go_PWR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Exit_PWR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Get_CS_State
</UL>

<P><STRONG><a name="[ad]"></a>write_register</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_cap1203.o(i.write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_register &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Standby_Sensitivity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Standby_CS
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_PWR_Time
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_PWR_CS
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Int_Clr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Go_Standby
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Go_PWR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Exit_PWR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Set_Sensitivity
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAP1203_Int_Enb
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
